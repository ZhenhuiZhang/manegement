//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
NotificationPayload = module.exports.NotificationPayload = function(args) {
  this.title = null;
  this.body = null;
  this.icon = null;
  this.sound = null;
  this.badge = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.sound !== undefined && args.sound !== null) {
      this.sound = args.sound;
    }
    if (args.badge !== undefined && args.badge !== null) {
      this.badge = args.badge;
    }
  }
};
NotificationPayload.prototype = {};
NotificationPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.icon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sound = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.badge = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationPayload.prototype.write = function(output) {
  output.writeStructBegin('NotificationPayload');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 2);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRING, 3);
    output.writeString(this.icon);
    output.writeFieldEnd();
  }
  if (this.sound !== null && this.sound !== undefined) {
    output.writeFieldBegin('sound', Thrift.Type.STRING, 4);
    output.writeString(this.sound);
    output.writeFieldEnd();
  }
  if (this.badge !== null && this.badge !== undefined) {
    output.writeFieldBegin('badge', Thrift.Type.STRING, 5);
    output.writeString(this.badge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = module.exports.Message = function(args) {
  this.notification = null;
  this.data = null;
  this.delay_while_idle = null;
  this.time_to_live = null;
  this.priority = null;
  this.dry_run = null;
  this.api_key = null;
  if (args) {
    if (args.notification !== undefined && args.notification !== null) {
      this.notification = new ttypes.NotificationPayload(args.notification);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyMap(args.data, [null]);
    }
    if (args.delay_while_idle !== undefined && args.delay_while_idle !== null) {
      this.delay_while_idle = args.delay_while_idle;
    }
    if (args.time_to_live !== undefined && args.time_to_live !== null) {
      this.time_to_live = args.time_to_live;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.dry_run !== undefined && args.dry_run !== null) {
      this.dry_run = args.dry_run;
    }
    if (args.api_key !== undefined && args.api_key !== null) {
      this.api_key = args.api_key;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notification = new ttypes.NotificationPayload();
        this.notification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.data = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.data[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.delay_while_idle = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.time_to_live = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.priority = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.dry_run = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.api_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.notification !== null && this.notification !== undefined) {
    output.writeFieldBegin('notification', Thrift.Type.STRUCT, 1);
    this.notification.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.data));
    for (var kiter8 in this.data)
    {
      if (this.data.hasOwnProperty(kiter8))
      {
        var viter9 = this.data[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.delay_while_idle !== null && this.delay_while_idle !== undefined) {
    output.writeFieldBegin('delay_while_idle', Thrift.Type.BOOL, 3);
    output.writeBool(this.delay_while_idle);
    output.writeFieldEnd();
  }
  if (this.time_to_live !== null && this.time_to_live !== undefined) {
    output.writeFieldBegin('time_to_live', Thrift.Type.I32, 4);
    output.writeI32(this.time_to_live);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.STRING, 5);
    output.writeString(this.priority);
    output.writeFieldEnd();
  }
  if (this.dry_run !== null && this.dry_run !== undefined) {
    output.writeFieldBegin('dry_run', Thrift.Type.BOOL, 6);
    output.writeBool(this.dry_run);
    output.writeFieldEnd();
  }
  if (this.api_key !== null && this.api_key !== undefined) {
    output.writeFieldBegin('api_key', Thrift.Type.STRING, 7);
    output.writeString(this.api_key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnicastResult = module.exports.UnicastResult = function(args) {
  this.token = null;
  this.error = null;
  this.registration_id = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.registration_id !== undefined && args.registration_id !== null) {
      this.registration_id = args.registration_id;
    }
  }
};
UnicastResult.prototype = {};
UnicastResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registration_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnicastResult.prototype.write = function(output) {
  output.writeStructBegin('UnicastResult');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.registration_id !== null && this.registration_id !== undefined) {
    output.writeFieldBegin('registration_id', Thrift.Type.STRING, 3);
    output.writeString(this.registration_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MulticastResult = module.exports.MulticastResult = function(args) {
  this.multicast_id = null;
  this.success = null;
  this.failure = null;
  this.canonical_ids = null;
  this.results = null;
  this.ext_info = null;
  if (args) {
    if (args.multicast_id !== undefined && args.multicast_id !== null) {
      this.multicast_id = args.multicast_id;
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.canonical_ids !== undefined && args.canonical_ids !== null) {
      this.canonical_ids = args.canonical_ids;
    }
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [ttypes.UnicastResult]);
    }
    if (args.ext_info !== undefined && args.ext_info !== null) {
      this.ext_info = Thrift.copyMap(args.ext_info, [null]);
    }
  }
};
MulticastResult.prototype = {};
MulticastResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.multicast_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.failure = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.canonical_ids = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.results = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.UnicastResult();
          elem16.read(input);
          this.results.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size17 = 0;
        var _rtmp321;
        this.ext_info = {};
        var _ktype18 = 0;
        var _vtype19 = 0;
        _rtmp321 = input.readMapBegin();
        _ktype18 = _rtmp321.ktype;
        _vtype19 = _rtmp321.vtype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var key23 = null;
          var val24 = null;
          key23 = input.readString();
          val24 = input.readString();
          this.ext_info[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MulticastResult.prototype.write = function(output) {
  output.writeStructBegin('MulticastResult');
  if (this.multicast_id !== null && this.multicast_id !== undefined) {
    output.writeFieldBegin('multicast_id', Thrift.Type.I64, 1);
    output.writeI64(this.multicast_id);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 2);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.I32, 3);
    output.writeI32(this.failure);
    output.writeFieldEnd();
  }
  if (this.canonical_ids !== null && this.canonical_ids !== undefined) {
    output.writeFieldBegin('canonical_ids', Thrift.Type.I32, 4);
    output.writeI32(this.canonical_ids);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter25 in this.results)
    {
      if (this.results.hasOwnProperty(iter25))
      {
        iter25 = this.results[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ext_info !== null && this.ext_info !== undefined) {
    output.writeFieldBegin('ext_info', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.ext_info));
    for (var kiter26 in this.ext_info)
    {
      if (this.ext_info.hasOwnProperty(kiter26))
      {
        var viter27 = this.ext_info[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DBMessage = module.exports.DBMessage = function(args) {
  this.key = null;
  this.address = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
DBMessage.prototype = {};
DBMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DBMessage.prototype.write = function(output) {
  output.writeStructBegin('DBMessage');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.kUrlScheme = 'url_scheme';
