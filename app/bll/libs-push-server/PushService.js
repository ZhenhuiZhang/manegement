//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./aiopns_types');
//HELPER FUNCTIONS AND STRUCTURES

PushService_multicastDbPush_args = function(args) {
  this.dbmessage = null;
  if (args) {
    if (args.dbmessage !== undefined && args.dbmessage !== null) {
      this.dbmessage = new ttypes.DBMessage(args.dbmessage);
    }
  }
};
PushService_multicastDbPush_args.prototype = {};
PushService_multicastDbPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dbmessage = new ttypes.DBMessage();
        this.dbmessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_multicastDbPush_args.prototype.write = function(output) {
  output.writeStructBegin('PushService_multicastDbPush_args');
  if (this.dbmessage !== null && this.dbmessage !== undefined) {
    output.writeFieldBegin('dbmessage', Thrift.Type.STRUCT, 1);
    this.dbmessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushService_multicastDbPush_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DBMessage(args.success);
    }
  }
};
PushService_multicastDbPush_result.prototype = {};
PushService_multicastDbPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DBMessage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_multicastDbPush_result.prototype.write = function(output) {
  output.writeStructBegin('PushService_multicastDbPush_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushService_multicastPush_args = function(args) {
  this.tokens = null;
  this.message = null;
  if (args) {
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = Thrift.copyList(args.tokens, [null]);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
PushService_multicastPush_args.prototype = {};
PushService_multicastPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.tokens = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString();
          this.tokens.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_multicastPush_args.prototype.write = function(output) {
  output.writeStructBegin('PushService_multicastPush_args');
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.tokens.length);
    for (var iter35 in this.tokens)
    {
      if (this.tokens.hasOwnProperty(iter35))
      {
        iter35 = this.tokens[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushService_multicastPush_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MulticastResult(args.success);
    }
  }
};
PushService_multicastPush_result.prototype = {};
PushService_multicastPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MulticastResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_multicastPush_result.prototype.write = function(output) {
  output.writeStructBegin('PushService_multicastPush_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushService_unicastPush_args = function(args) {
  this.to = null;
  this.message = null;
  if (args) {
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
PushService_unicastPush_args.prototype = {};
PushService_unicastPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_unicastPush_args.prototype.write = function(output) {
  output.writeStructBegin('PushService_unicastPush_args');
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 1);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushService_unicastPush_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UnicastResult(args.success);
    }
  }
};
PushService_unicastPush_result.prototype = {};
PushService_unicastPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UnicastResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushService_unicastPush_result.prototype.write = function(output) {
  output.writeStructBegin('PushService_unicastPush_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PushServiceClient.prototype = {};
PushServiceClient.prototype.seqid = function() { return this._seqid; }
PushServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
PushServiceClient.prototype.multicastDbPush = function(dbmessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multicastDbPush(dbmessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multicastDbPush(dbmessage);
  }
};

PushServiceClient.prototype.send_multicastDbPush = function(dbmessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multicastDbPush', Thrift.MessageType.CALL, this.seqid());
  var args = new PushService_multicastDbPush_args();
  args.dbmessage = dbmessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PushServiceClient.prototype.recv_multicastDbPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PushService_multicastDbPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multicastDbPush failed: unknown result');
};
PushServiceClient.prototype.multicastPush = function(tokens, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multicastPush(tokens, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multicastPush(tokens, message);
  }
};

PushServiceClient.prototype.send_multicastPush = function(tokens, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multicastPush', Thrift.MessageType.CALL, this.seqid());
  var args = new PushService_multicastPush_args();
  args.tokens = tokens;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PushServiceClient.prototype.recv_multicastPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PushService_multicastPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multicastPush failed: unknown result');
};
PushServiceClient.prototype.unicastPush = function(to, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unicastPush(to, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unicastPush(to, message);
  }
};

PushServiceClient.prototype.send_unicastPush = function(to, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unicastPush', Thrift.MessageType.CALL, this.seqid());
  var args = new PushService_unicastPush_args();
  args.to = to;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PushServiceClient.prototype.recv_unicastPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PushService_unicastPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unicastPush failed: unknown result');
};
PushServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PushServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PushServiceProcessor.prototype.process_multicastDbPush = function(seqid, input, output) {
  var args = new PushService_multicastDbPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multicastDbPush.length === 1) {
    Q.fcall(this._handler.multicastDbPush, args.dbmessage)
      .then(function(result) {
        var result = new PushService_multicastDbPush_result({success: result});
        output.writeMessageBegin("multicastDbPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multicastDbPush", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.multicastDbPush(args.dbmessage, function (err, result) {
      if (err == null) {
        var result = new PushService_multicastDbPush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("multicastDbPush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multicastDbPush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PushServiceProcessor.prototype.process_multicastPush = function(seqid, input, output) {
  var args = new PushService_multicastPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multicastPush.length === 2) {
    Q.fcall(this._handler.multicastPush, args.tokens, args.message)
      .then(function(result) {
        var result = new PushService_multicastPush_result({success: result});
        output.writeMessageBegin("multicastPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multicastPush", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.multicastPush(args.tokens, args.message, function (err, result) {
      if (err == null) {
        var result = new PushService_multicastPush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("multicastPush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multicastPush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PushServiceProcessor.prototype.process_unicastPush = function(seqid, input, output) {
  var args = new PushService_unicastPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unicastPush.length === 2) {
    Q.fcall(this._handler.unicastPush, args.to, args.message)
      .then(function(result) {
        var result = new PushService_unicastPush_result({success: result});
        output.writeMessageBegin("unicastPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unicastPush", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unicastPush(args.to, args.message, function (err, result) {
      if (err == null) {
        var result = new PushService_unicastPush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unicastPush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unicastPush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

